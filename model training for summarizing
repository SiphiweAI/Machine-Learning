""" to Load and Tokenize """
from transformers import BertTokenizer
from datasets import Dataset
from sklearn.model_selection import train_test_split
import pandas as pd


# Load your data
data = pd.read_csv('Stories_and_summary.csv')

# Convert to Dataset
dataset = Dataset.from_pandas(data)

def split_dataset(data, test_size=0.1):
    train_data, val_data = train_test_split(data, test_size=test_size, stratify=data['label'])
    return Dataset.from_pandas(train_data), Dataset.from_pandas(val_data)

def tokenize_function(examples):
    inputs = tokenizer(examples['text'], max_length=1024, truncation=True)
    targets = tokenizer(examples['summary'], max_length=150, truncation=True)
    inputs['labels'] = targets['input_ids']
    return inputs


# Load tokenizer
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

train_dataset, val_dataset = split_dataset(data)                # call split_dataset function and assign to train and val

# Tokenize data
tokenized_datasets = dataset.map(tokenize_function, batched=True)
tokenized_train = train_dataset.map(tokenize_function, batched=True)
tokenized_val = val_dataset.map(tokenize_function, batched=True)


""" to prepare Model and Training arguments """
from transformers import BartTokenizer, BartForConditionalGeneration, Trainer, TrainingArguments

# Load tokenizer and model
tokenizer = BartTokenizer.from_pretrained('facebook/bart-large-cnn')
model = BartForConditionalGeneration.from_pretrained('facebook/bart-large-cnn')

# Define training arguments
training_args = TrainingArguments(
    output_dir='./results',
    evaluation_strategy='epoch',
    per_device_train_batch_size=4,
    per_device_eval_batch_size=4,
    num_train_epochs=3,
    weight_decay=0.01,
)

# Define Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_train,
    eval_dataset=tokenized_val                                         # validation set 
)


""" to train the model """
trainer.train()                                                         # train the model

model.save_pretrained('./fine-tuned-bart')                              # save the model
